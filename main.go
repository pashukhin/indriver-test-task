package main

import (
	"flag"
	"fmt"

	"github.com/gin-gonic/gin"
	"github.com/jinzhu/gorm"
	_ "github.com/jinzhu/gorm/dialects/postgres"

	ginSwagger "github.com/swaggo/gin-swagger"
	"github.com/swaggo/gin-swagger/swaggerFiles"

	_ "github.com/pashukhin/indriver-test-task/docs" // docs is generated by Swag CLI, you have to import it.

	"github.com/pashukhin/indriver-test-task/controller"
	"github.com/pashukhin/indriver-test-task/model"
)

// @title inDriver test task
// @version 1.0
// @description Implementation of inDriver test task.

// @contact.name Grigoriy Pashukhin
// @contact.url https://github.com/pashukhin

// @host localhost:8080
// @BasePath /
func main() {
	httpAddr, dbHost, dbPort, dbUser, dbPassword, dbDatabase := params()
	dsn := fmt.Sprintf("host=%s port=%d user=%s password=%s dbname=%s sslmode=disable", *dbHost, *dbPort, *dbUser, *dbPassword, *dbDatabase)
	db, err := gorm.Open("postgres", dsn)
	if err != nil {
		fmt.Println("error: ", err)
		return
	}
	defer db.Close()
	db.LogMode(true)

	db.AutoMigrate(&model.CarModel{})

	r := gin.Default()

	swaggerURL := ginSwagger.URL(fmt.Sprintf("http://%s/swagger/doc.json", *httpAddr))
	r.GET("/swagger/*any", ginSwagger.WrapHandler(swaggerFiles.Handler, swaggerURL))

	//carModelRepository := repository.NewCarModelRepository(db)
	carModelController := controller.NewCarModelController(db)
	carModelGroup := r.Group("/car_model")
	{
		carModelGroup.GET("/", carModelController.List)
		carModelGroup.POST("/", carModelController.Create)
		carModelGroup.GET("/:id", carModelController.Get)
		carModelGroup.PUT("/:id", carModelController.Update)
		carModelGroup.DELETE("/:id", carModelController.Delete)
	}

	r.GET("/ping", func(c *gin.Context) {
		c.JSON(200, gin.H{
			"message": "pong",
		})
	})
	//r.Run(*httpAddr)
	r.Run()
}

func params() (*string, *string, *int, *string, *string, *string) {
	httpAddr := flag.String("http.addr", "loaclhost:8080", "HTTP listen address")
	dbHost := flag.String("db.host", "db", "db host")
	dbPort := flag.Int("db.port", 5432, "db port")
	dbUser := flag.String("db.user", "user", "db user")
	dbPassword := flag.String("db.password", "password", "db password")
	dbDatabase := flag.String("db.database", "db", "database name")
	flag.Parse()
	return httpAddr, dbHost, dbPort, dbUser, dbPassword, dbDatabase
}
